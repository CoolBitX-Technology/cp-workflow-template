name: Push and rotate image

on: 
  workflow_call:
    secrets:
      PROD_CP_GCP_PROJECT_ID:
        required: true
      DEV_CP_GCP_PROJECT_ID:
        required: true
      PROD_CP_GCP_SVC_TERRAFORM:
        required: true
      DEV_CP_GCP_SVC_TERRAFORM:
        required: true
      PROD_CP_GCP_SVC_GITHUB_RUNNER_KEY_FILE:
        required: true
      DEV_CP_GCP_SVC_GITHUB_RUNNER_KEY_FILE:
        required: true

env:
  REGISTRY: gcr.io

jobs:
  push_and_rotate_image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main

      - name: Export environments
        run: |
          REPOSITORY=${GITHUB_REPOSITORY##*/}
          IMAGE_TAG_SHA=${GITHUB_SHA:0:7}

          if [[ "$REF" =~ ^[0-9]+.[0-9]+.[0-9]+$ || $GITHUB_REF_NAME == "master" ]]; then
            GCP_ENV=production
            GCP_PROJECT_ID=${{ secrets.PROD_CP_GCP_PROJECT_ID }}
            GCP_SVC_TERRAFORM=${{ secrets.PROD_CP_GCP_SVC_TERRAFORM }}
          else
            GCP_ENV=develop
            GCP_PROJECT_ID=${{ secrets.DEV_CP_GCP_PROJECT_ID }}
            GCP_SVC_TERRAFORM=${{ secrets.DEV_CP_GCP_SVC_TERRAFORM }}
          fi

          echo "node version: `node -v`"

          cat <<- EOF >> ${GITHUB_ENV}
          GCP_ENV=${GCP_ENV}
          GCP_PROJECT_ID=${GCP_PROJECT_ID}
          IMAGE_NAME=${REGISTRY}/${GCP_PROJECT_ID}/${REPOSITORY}
          IMAGE_TAG_SHA=${IMAGE_TAG_SHA}
          IMAGE_VERSION_SECRET_NAME=${REPOSITORY}-image-version
          GCP_SVC_TERRAFORM=${GCP_SVC_TERRAFORM}
          EOF

      - name: Authenticate gcloud
        if: ${{ env.GCP_ENV == 'production' }}
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.PROD_CP_GCP_SVC_GITHUB_RUNNER_KEY_FILE }}

      - name: Authenticate gcloud
        if: ${{ env.GCP_ENV == 'develop' }}
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.DEV_CP_GCP_SVC_GITHUB_RUNNER_KEY_FILE }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v0

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: image
          path: .

      - name: Load Docker image
        run: |
          docker load --input image.tar
          docker tag ${IMAGE_NAME}:${IMAGE_TAG_SHA} ${IMAGE_NAME}:latest
          docker images

      - name: Push image
        if: ${{ ! env.ACT }}
        run: |
          gcloud auth configure-docker ${REGISTRY} --quiet
          docker push --all-tags ${IMAGE_NAME}

      - name: Upload image version
        run: |
          gcloud secrets create ${IMAGE_VERSION_SECRET_NAME} --impersonate-service-account="${GCP_SVC_TERRAFORM}" 2>/dev/null || \
            echo "Secret ${IMAGE_VERSION_SECRET_NAME} already exist!!"

          echo -n "${IMAGE_TAG_SHA}" \
            | gcloud secrets versions add ${IMAGE_VERSION_SECRET_NAME} --data-file=- \
                --impersonate-service-account="${GCP_SVC_TERRAFORM}"

      - name: List image version
        run: |
          gcloud secrets versions list ${IMAGE_VERSION_SECRET_NAME} \
            --filter='STATE!=destroyed' \
            --format='value(NAME)' \
            --impersonate-service-account="${GCP_SVC_TERRAFORM}" \
            | tail -n+3 \
            | tee list_to_destroy 
          cat list_to_destroy

      - name: Rotate image version  
        run: |
          cat list_to_destroy | while read LINE; do 
            echo "destroy version: $LINE" 
            gcloud secrets versions destroy "$LINE" \
              --secret=${IMAGE_VERSION_SECRET_NAME} \
              --impersonate-service-account="${GCP_SVC_TERRAFORM}" \
              --quiet
          done